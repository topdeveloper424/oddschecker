#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.20
#  in conjunction with Tcl version 8.6
#    Oct 25, 2020 11:48:24 AM -0400  platform: Windows NT

import sys

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True
    
from tkinter import messagebox

import oddschecker_support

#import requests
from bs4 import BeautifulSoup
import json
import os
from datetime import datetime
import xlsxwriter
from threading import Timer
import time

from selenium import webdriver
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.by import By
from selenium.common.exceptions import TimeoutException
from selenium.webdriver.chrome.options import Options


def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    oddschecker_support.set_Tk_var()
    top = Oddschecker (root)
    oddschecker_support.init(root, top)
    root.mainloop()

w = None
def create_Oddschecker(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = tk.Toplevel (root)
    oddschecker_support.set_Tk_var()
    top = Oddschecker (w)
    oddschecker_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Oddschecker():
    global w
    w.destroy()
    w = None

class Oddschecker:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85' 
        _ana2color = '#ececec' # Closest X11 color: 'gray92' 
        font10 = "-family {Segoe UI} -size 16 -weight bold -slant "  \
            "roman -underline 0 -overstrike 0"
        font9 = "-family {Segoe UI} -size 9 -weight normal -slant "  \
            "italic -underline 0 -overstrike 0"

        top.geometry("373x407+514+204")
        top.title("VIP Tips")
        top.configure(background="#6750d8")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")

        self.menubar = tk.Menu(top,font="TkMenuFont",bg='#5a3ad8',fg=_fgcolor)
        top.configure(menu = self.menubar)

        self.Label1 = tk.Label(top)
        self.Label1.place(relx=0.268, rely=0.049, height=41, width=164)
        self.Label1.configure(activebackground="#f9f9f9")
        self.Label1.configure(activeforeground="black")
        self.Label1.configure(background="#6750d8")
        self.Label1.configure(disabledforeground="#a3a3a3")
        self.Label1.configure(font=font10)
        self.Label1.configure(foreground="#000000")
        self.Label1.configure(highlightbackground="#d9d9d9")
        self.Label1.configure(highlightcolor="black")
        self.Label1.configure(text='''VIP Tips Bot''')

        self.Label2 = tk.Label(top)
        self.Label2.place(relx=0.107, rely=0.221, height=21, width=134)
        self.Label2.configure(activebackground="#f9f9f9")
        self.Label2.configure(activeforeground="black")
        self.Label2.configure(background="#6750d8")
        self.Label2.configure(disabledforeground="#a3a3a3")
        self.Label2.configure(foreground="#d4ff00")
        self.Label2.configure(highlightbackground="#d9d9d9")
        self.Label2.configure(highlightcolor="black")
        self.Label2.configure(text='''Min draw odd :''')

        self.min_draw_odd_spin = tk.Spinbox(top, from_=1.0, to=100.0)
        self.min_draw_odd_spin.place(relx=0.483, rely=0.221, relheight=0.047
                , relwidth=0.282)
        self.min_draw_odd_spin.configure(activebackground="#f9f9f9")
        self.min_draw_odd_spin.configure(background="white")
        self.min_draw_odd_spin.configure(buttonbackground="#d9d9d9")
        self.min_draw_odd_spin.configure(disabledforeground="#a3a3a3")
        self.min_draw_odd_spin.configure(foreground="black")
        self.min_draw_odd_spin.configure(highlightbackground="black")
        self.min_draw_odd_spin.configure(highlightcolor="black")
        self.min_draw_odd_spin.configure(insertbackground="black")
        self.min_draw_odd_spin.configure(selectbackground="#c4c4c4")
        self.min_draw_odd_spin.configure(selectforeground="black")
        self.min_draw_odd_spin.configure(textvariable=oddschecker_support.spinbox1)

        self.Label3 = tk.Label(top)
        self.Label3.place(relx=0.295, rely=0.27, height=21, width=214)
        self.Label3.configure(activebackground="#f9f9f9")
        self.Label3.configure(activeforeground="black")
        self.Label3.configure(background="#6750d8")
        self.Label3.configure(disabledforeground="#a3a3a3")
        self.Label3.configure(font=font9)
        self.Label3.configure(foreground="#000000")
        self.Label3.configure(highlightbackground="#d9d9d9")
        self.Label3.configure(highlightcolor="black")
        self.Label3.configure(text='''ex: remove teams with draw odd < 3.6''')

        self.Label4 = tk.Label(top)
        self.Label4.place(relx=0.027, rely=0.393, height=21, width=144)
        self.Label4.configure(activebackground="#f9f9f9")
        self.Label4.configure(activeforeground="black")
        self.Label4.configure(background="#6750d8")
        self.Label4.configure(disabledforeground="#a3a3a3")
        self.Label4.configure(foreground="#d4ff00")
        self.Label4.configure(highlightbackground="#d9d9d9")
        self.Label4.configure(highlightcolor="black")
        self.Label4.configure(text='''Home, Away odd range :''')

        self.home_range_spin = tk.Spinbox(top, from_=1.0, to=100.0)
        self.home_range_spin.place(relx=0.536, rely=0.393, relheight=0.047
                , relwidth=0.121)
        self.home_range_spin.configure(activebackground="#f9f9f9")
        self.home_range_spin.configure(background="white")
        self.home_range_spin.configure(buttonbackground="#d9d9d9")
        self.home_range_spin.configure(disabledforeground="#a3a3a3")
        self.home_range_spin.configure(foreground="black")
        self.home_range_spin.configure(highlightbackground="black")
        self.home_range_spin.configure(highlightcolor="black")
        self.home_range_spin.configure(insertbackground="black")
        self.home_range_spin.configure(selectbackground="#c4c4c4")
        self.home_range_spin.configure(selectforeground="black")
        self.home_range_spin.configure(textvariable=oddschecker_support.spinbox2)

        self.away_range_spin = tk.Spinbox(top, from_=1.0, to=100.0)
        self.away_range_spin.place(relx=0.804, rely=0.393, relheight=0.047
                , relwidth=0.121)
        self.away_range_spin.configure(activebackground="#f9f9f9")
        self.away_range_spin.configure(background="white")
        self.away_range_spin.configure(buttonbackground="#d9d9d9")
        self.away_range_spin.configure(disabledforeground="#a3a3a3")
        self.away_range_spin.configure(foreground="black")
        self.away_range_spin.configure(highlightbackground="black")
        self.away_range_spin.configure(highlightcolor="black")
        self.away_range_spin.configure(insertbackground="black")
        self.away_range_spin.configure(selectbackground="#c4c4c4")
        self.away_range_spin.configure(selectforeground="black")
        self.away_range_spin.configure(textvariable=oddschecker_support.spinbox3)

        self.Label5 = tk.Label(top)
        self.Label5.place(relx=0.188, rely=0.442, height=21, width=294)
        self.Label5.configure(activebackground="#f9f9f9")
        self.Label5.configure(activeforeground="black")
        self.Label5.configure(background="#6750d8")
        self.Label5.configure(disabledforeground="#a3a3a3")
        self.Label5.configure(font=font9)
        self.Label5.configure(foreground="#000000")
        self.Label5.configure(highlightbackground="#d9d9d9")
        self.Label5.configure(highlightcolor="black")
        self.Label5.configure(text='''ex: Home or away odd : min 1.5, max 1.75''')

        self.Label6 = tk.Label(top)
        self.Label6.place(relx=0.429, rely=0.393, height=21, width=34)
        self.Label6.configure(activebackground="#f9f9f9")
        self.Label6.configure(activeforeground="black")
        self.Label6.configure(background="#6750d8")
        self.Label6.configure(disabledforeground="#a3a3a3")
        self.Label6.configure(foreground="#000000")
        self.Label6.configure(highlightbackground="#d9d9d9")
        self.Label6.configure(highlightcolor="black")
        self.Label6.configure(text='''Min : ''')

        self.Label7 = tk.Label(top)
        self.Label7.place(relx=0.697, rely=0.393, height=21, width=35)
        self.Label7.configure(activebackground="#f9f9f9")
        self.Label7.configure(activeforeground="black")
        self.Label7.configure(background="#6750d8")
        self.Label7.configure(disabledforeground="#a3a3a3")
        self.Label7.configure(foreground="#000000")
        self.Label7.configure(highlightbackground="#d9d9d9")
        self.Label7.configure(highlightcolor="black")
        self.Label7.configure(text='''Max : ''')

        self.Label8 = tk.Label(top)
        self.Label8.place(relx=0.134, rely=0.565, height=21, width=114)
        self.Label8.configure(activebackground="#f9f9f9")
        self.Label8.configure(activeforeground="black")
        self.Label8.configure(background="#6750d8")
        self.Label8.configure(disabledforeground="#a3a3a3")
        self.Label8.configure(foreground="#d4ff00")
        self.Label8.configure(highlightbackground="#d9d9d9")
        self.Label8.configure(highlightcolor="black")
        self.Label8.configure(text='''Min Abs odd :''')

        self.min_abs_odd_spin = tk.Spinbox(top, from_=1.0, to=100.0)
        self.min_abs_odd_spin.place(relx=0.456, rely=0.565, relheight=0.047
                , relwidth=0.228)
        self.min_abs_odd_spin.configure(activebackground="#f9f9f9")
        self.min_abs_odd_spin.configure(background="white")
        self.min_abs_odd_spin.configure(buttonbackground="#d9d9d9")
        self.min_abs_odd_spin.configure(disabledforeground="#a3a3a3")
        self.min_abs_odd_spin.configure(foreground="black")
        self.min_abs_odd_spin.configure(highlightbackground="black")
        self.min_abs_odd_spin.configure(highlightcolor="black")
        self.min_abs_odd_spin.configure(insertbackground="black")
        self.min_abs_odd_spin.configure(selectbackground="#c4c4c4")
        self.min_abs_odd_spin.configure(selectforeground="black")
        self.min_abs_odd_spin.configure(textvariable=oddschecker_support.spinbox4)

        self.Label9 = tk.Label(top)
        self.Label9.place(relx=0.214, rely=0.614, height=21, width=284)
        self.Label9.configure(activebackground="#f9f9f9")
        self.Label9.configure(activeforeground="black")
        self.Label9.configure(background="#6750d8")
        self.Label9.configure(disabledforeground="#a3a3a3")
        self.Label9.configure(font=font9)
        self.Label9.configure(foreground="#000000")
        self.Label9.configure(highlightbackground="#d9d9d9")
        self.Label9.configure(highlightcolor="black")
        self.Label9.configure(text='''ex: remove teams with odd difference value =< 3.3''')

        self.gen_excel_btn = tk.Button(top, command=self.start)
        self.gen_excel_btn.place(relx=0.295, rely=0.762, height=24, width=147)
        self.gen_excel_btn.configure(activebackground="#ececec")
        self.gen_excel_btn.configure(activeforeground="#000000")
        self.gen_excel_btn.configure(background="#d8860b")
        self.gen_excel_btn.configure(disabledforeground="#a3a3a3")
        self.gen_excel_btn.configure(foreground="#000000")
        self.gen_excel_btn.configure(highlightbackground="#d9d9d9")
        self.gen_excel_btn.configure(highlightcolor="black")
        self.gen_excel_btn.configure(pady="0")
        self.gen_excel_btn.configure(text='''Generate Excel''')

        self.status_label = tk.Label(top)
        self.status_label.place(relx=0.08, rely=0.885, height=21, width=314)
        self.status_label.configure(activebackground="#f9f9f9")
        self.status_label.configure(activeforeground="black")
        self.status_label.configure(background="#6750d8")
        self.status_label.configure(disabledforeground="#a3a3a3")
        self.status_label.configure(foreground="#000000")
        self.status_label.configure(highlightbackground="#d9d9d9")
        self.status_label.configure(highlightcolor="black")
        self.status_label.configure(text='''ready to start...''')
        
        self.timerThread = None

        self.url = "https://www.oddschecker.com/football#bumper-coupon"
        self.headers = {
            "scheme":"https",
            "user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36"
        }
        self.min_draw_odd = 3.6
        self.max_home_odd = 1.5
        self.min_away_odd = 1.75
        self.abs_min_odd = 3.3
        self.driver = None
        
        self.twice_flag = False

        if os.path.exists('setting.json'):
            with open('setting.json') as f:
                data = json.load(f)
                self.min_draw_odd_spin.insert(0,str(data['min_draw_odd']))
                self.home_range_spin.insert(0,str(data['max_home_odd']))
                self.away_range_spin.insert(0,str(data['min_away_odd']))
                self.min_abs_odd_spin.insert(0,str(data['abs_min_odd']))
        else:
            messagebox.showerror("error","Missing setting.json file !")
        root.protocol("WM_DELETE_WINDOW", self.on_closing)

    def get_driver(self):
        if self.driver == None:
            chrome_path = r"chromedriver.exe"
            chrome_options = Options()
            chrome_options.add_argument("--headless")
            chrome_options.add_argument("--log-level=3")
            prefs = {'profile.managed_default_content_settings.images':2}
            chrome_options.add_experimental_option("prefs", prefs)
            self.driver = webdriver.Chrome(chrome_path,options=chrome_options)
            self.driver.maximize_window()
    
    def save_settings(self):
        min_draw_odd_str = self.min_draw_odd_spin.get()
        home_range_str = self.home_range_spin.get() 
        away_range_str = self.away_range_spin.get()
        min_abs_odd_str = self.min_abs_odd_spin.get()

        try:
            if min_draw_odd_str == "" or float(min_draw_odd_str) < 0:
                messagebox.showerror("error","Enter correct Min Draw odd !")
                return True
        except Exception:
                messagebox.showerror("error","Enter correct Min Draw odd !")
                return True
            
        try:
            if home_range_str == "" or float(home_range_str) < 0:
                messagebox.showerror("error","Enter correct home range value !")
                return True
        except Exception:
                messagebox.showerror("error","Enter correct home range value !")
                return True

        try:
            if away_range_str == "" or float(away_range_str) < 0:
                messagebox.showerror("error","Enter correct away range value !")
                return True
        except Exception:
                messagebox.showerror("error","Enter correct away range value !")
                return True

        try:
            if min_abs_odd_str == "" or float(min_abs_odd_str) < 0:
                messagebox.showerror("error","Enter correct Min Abs odd !")
                return True
        except Exception:
                messagebox.showerror("error","Enter correct Min Abs odd !")
                return True
        self.min_draw_odd = float(min_draw_odd_str)
        self.max_home_odd = float(home_range_str)
        self.min_away_odd = float(away_range_str)
        self.abs_min_odd = float(min_abs_odd_str)
            
        return False

    def start(self):
        self.timerThread = Timer(0.1, self.start_scraper)
        self.timerThread.start()


    def start_scraper(self):
        self.status_label.configure(text=''' Preparing for scraping data from website... ''')
        if self.save_settings():
            return
        self.gen_excel_btn['state'] = 'disabled'
        
        if self.driver == None:
            self.get_driver()

        self.driver.get(self.url)
        
        self.status_label.configure(text=''' Getting decimal odds... ''')
        if self.twice_flag == False:
            try:
                element_present = EC.presence_of_element_located((By.ID,"promo-modal"))
                WebDriverWait(self.driver, 10).until(element_present)
                modal = self.driver.find_element_by_id("promo-modal")
                modal.find_element_by_class_name("offer-close").click()
                time.sleep(1)
            except TimeoutError:
                pass

            try:
                element_present = EC.presence_of_element_located((By.ID,"top-menu"))
                WebDriverWait(self.driver, 20).until(element_present)
                top_menu = self.driver.find_element_by_id("top-menu")
                setting_li = top_menu.find_element_by_class_name("all-tools")
                setting_li.click()
                time.sleep(1)
                mob_pos = top_menu.find_element_by_id("all-tools-panel-beta")
                formats = mob_pos.find_elements_by_class_name("odds-format-quick")
                formats[1].click()
                time.sleep(1)
            except TimeoutError:
                self.status_label.configure(text=''' Error happened! please try again ''')
                self.driver.quit()
                return False
        
        self.status_label.configure(text=''' Calculating odds ... ''')

        try:
            element_present = EC.presence_of_element_located((By.CLASS_NAME,"standard-list"))
            WebDriverWait(self.driver, 40).until(element_present)
        except TimeoutError:
            self.status_label.configure(text=''' Error happened! please try again ''')
            self.driver.quit()
            return False
        time.sleep(5)
        self.twice_flag = True
        
#        source = requests.get(self.url, headers= self.headers).text
        soup = BeautifulSoup(self.driver.page_source, 'lxml')
        container = soup.find('div',{'id':'fixtures'})
        table = container.find('table',{'class':'standard-list'})
        trs = table.findAll('tr',{'class':['hda-header','match-on']})
        league = ''
        league_date = ''
        
        data = []
        columns = ["Date", "League Name", "Time", "Teams Name", "Home Odd", "Draw Odd", "Away Odd", "ABS(Home odd - Away Odd)"]
        for tr in trs:
            class_name = tr['class']
            if 'hda-header' in class_name:
                headline = tr.find('a',{'class':'betam-headline'})
                headline_txt = headline.find('p',{'class':'beta-headline'}).text
                league = headline_txt.strip()
                league_date = tr.find('p',{'class':'event-date'}).text
                league_date = league_date.strip()
                print("------------------------------------------------------------------------------------")
                print(league)
                print(league_date)
            elif 'match-on' in class_name:
                time_div = tr.find('div',{'class':'time-div'})
                time_str = time_div.text
                time_str = time_str.strip()
                if time_str.lower() == "in play":
                    continue
                
                bet_teams = tr.findAll('p',{'class':'fixtures-bet-name'})
                if len(bet_teams) < 2:
                    continue
                
                team1 = bet_teams[0].text
                team2 = bet_teams[1].text
                    
                odd_tds = tr.findAll('span',{'class':'add-to-bet-basket'})
                if len(odd_tds) < 3:
                    continue
                home_odd_txt = odd_tds[0].text
                home_odd_txt = home_odd_txt.strip()
                home_odd = float(home_odd_txt)
                draw_odd_txt = odd_tds[1].text
                draw_odd_txt = draw_odd_txt.strip()
                print(draw_odd_txt)
                draw_odd = float(draw_odd_txt)
                away_odd_txt = odd_tds[2].text
                away_odd_txt = away_odd_txt.strip()
                away_odd = float(away_odd_txt)
                
                abs_odd = abs(home_odd - away_odd)
                
                if  draw_odd < self.min_draw_odd:
                    continue
                
                flag = False
                if self.max_home_odd <= home_odd and home_odd <= self.min_away_odd:
                    flag = True
                elif self.max_home_odd <= away_odd and away_odd <= self.min_away_odd:
                    flag = True
                    
                    
                if flag == False:
                    continue

                if self.abs_min_odd >= abs_odd:
                    continue
                
                row = []
                row.append(league_date)
                row.append(league)
                row.append(time_str)
                row.append(team1 + " v " + team2)
                row.append(round(home_odd, 2))
                row.append(round(draw_odd, 2))
                row.append(round(away_odd, 2))
                row.append(round(abs_odd, 2))
                data.append(row)

                print(time_str)
                print(team1 + " v " + team2)
                print(round(home_odd, 2))
                print(round(draw_odd, 2))
                print(round(away_odd, 2))
                print(round(abs_odd, 2))
        
        data.sort(key=self.takeSecond, reverse=True)
        data.insert(0, columns)
        print(data)
        file_name = self.write_excel(data)

        self.status_label.configure(text=''' Successfully generated ''' + file_name + ''' !''')
        
        self.gen_excel_btn['state'] = 'normal'


    def write_excel(self, data):
        file_name = datetime.now().strftime("vip_tips_%Y%m%d_%H%M%S") + ".xlsx"
        workbook = xlsxwriter.Workbook(file_name)
        worksheet = workbook.add_worksheet()
        row = 0
        for item in data:
            col = 0
            for cell in item:
                worksheet.write(row, col,cell)
                col += 1
            row += 1
        workbook.close()
        
        return file_name
        
    def takeSecond(self,elem):
        return elem[6]

    def convert_to_float(self,frac_str):
        try:
            return float(frac_str)
        except ValueError:
            num, denom = frac_str.split('/')
            try:
                leading, num = num.split(' ')
                whole = float(leading)
            except ValueError:
                whole = 0
            frac = float(num) / float(denom)
            return whole - frac if whole < 0 else whole + frac                    

    def on_closing(self):
        if messagebox.askokcancel("Quit", "Do you want to quit?"):
            if self.driver:
                self.driver.quit()
            if self.timerThread:
                self.timerThread.cancel()
            root.destroy()
        

if __name__ == '__main__':
    vp_start_gui()





